apiVersion: apps/v1
kind: Deployment
metadata:
  name: prevent
  namespace: {{ .Release.Namespace }}
  labels:
    app: prevent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prevent
  template:
    metadata:
      labels:
        app: prevent
    spec:
      containers:
        - name: prevent
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          ports:
            - name: http
              containerPort: {{ .Values.pod.containerPort }}
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu | quote }}
              memory: {{ .Values.resources.requests.memory }}
            limits:
              cpu: {{ .Values.resources.limits.cpu | quote }}
              memory: {{ .Values.resources.limits.memory }}
          env:
            {{- if eq .Values.secreteManagerType "vault" }}
            {{- include "secret-set-key-ref" (dict "name" "vault-credentials" "key" "vault-addr" "env" "VAULT_ADDR") | indent 10 }}
            {{- include "secret-set-key-ref" (dict "name" "vault-credentials" "key" "vault-token" "env" "VAULT_TOKEN") | indent 10 }}
            {{- end }}
            {{- if eq .Values.secreteManagerType "aws" }}
            {{- include "secret-set-key-ref" (dict "name" "aws-credentials" "key" "aws-access-key-id" "env" "AWS_ACCESS_KEY_ID") | indent 10 }}
            {{- include "secret-set-key-ref" (dict "name" "aws-credentials" "key" "aws-secret-access-key" "env" "AWS_SECRET_ACCESS_KEY") | indent 10 }}
            {{- include "secret-check-key" (dict "name" "aws-credentials" "key" "aws-session-token" "env" "AWS_SESSION_TOKEN" "namespace" .Release.Namespace) | indent 10 }}
            {{- end }}
            {{- if eq .Values.secreteManagerType "azure" }}
            {{- include "secret-set-key-ref" (dict "name" "azure-credentials" "key" "azure-client-id" "env" "AZURE_CLIENT_ID") | indent 10 }}
            {{- include "secret-set-key-ref" (dict "name" "azure-credentials" "key" "azure-client-secret" "env" "AZURE_CLIENT_SECRET") | indent 10 }}
            {{- include "secret-check-key" (dict "name" "azure-credentials" "key" "azure-tenant-id" "env" "AZURE_TENANT_ID" "namespace" .Release.Namespace) | indent 10 }}
            {{- end }}
            {{- if eq .Values.secreteManagerType "gcloud" }}
            {{- include "secret-set-key-ref" (dict "name" "gcloud-credentials" "key" "google-cloud-project" "env" "GOOGLE_CLOUD_PROJECT") | indent 10 }}
            {{- include "secret-check-key" (dict "name" "gcloud-credentials" "key" "google-cloud-region" "env" "GOOGLE_CLOUD_REGION" "namespace" .Release.Namespace) | indent 10 }}
            {{- include "secret-check-key" (dict "name" "gcloud-credentials" "key" "google-api-key" "env" "GOOGLE_API_KEY" "namespace" .Release.Namespace) | indent 10 }}
            {{- end }}
          {{- if eq .Values.secreteManagerType "gcloud" }}
          volumeMounts:
            - mountPath: /app/config/google-app-cred.json
              subPath: google-application-credentials-json
              name: google-app-cred-json-volume
      volumes:
        - name: google-app-cred-json-volume
          secret:
            secretName: gcloud-credentials
          {{- end }}
{{- if .Values.service.clusterIP.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: prevent
spec:
  type: ClusterIP
  selector:
    app: prevent
  ports:
    - name: http
      port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.targetPort }}
{{- end }}
{{- if .Values.service.NodePort.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: prevent-nodeport
  {{- if .Values.service.NodePort.annotations }}
  annotations:
{{ .Values.service.NodePort.annotations | toYaml | indent 4 }}
  {{- end }}
spec:
  type: NodePort
  selector:
    app: prevent
  ports:
    - name: http
      port: 80
      targetPort: 8086
{{- end }}